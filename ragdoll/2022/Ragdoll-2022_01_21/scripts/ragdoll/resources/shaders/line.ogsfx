uniform mat4 gWvpXf : WorldViewProjection;

attribute ToVertex {
    vec3 inPosition   : POSITION;
    vec4 inColor      : COLOR0;
};

attribute ToFragment {
    vec4 WorldPosition  : TEXCOORD0;
    vec4 Diffuse        : COLOR0;
};

attribute ToScreen  {
    vec4 colorOut : COLOR0;
}

GLSLShader ShaderVertex
{
    void main()
    {
        Diffuse = inColor;

        vec4 Po = vec4(inPosition, 1);
        WorldPosition = gWvpXf * Po;

        // Prevent z-fighting, and draw on top of solid
        WorldPosition.z -= 0.0005;

        gl_Position = WorldPosition;
    }
}

GLSLShader ShaderColor
{
    void main()
    {
        colorOut = Diffuse;
    }
}

technique Wireframe
{
    pass p0
    {
        VertexShader (in ToVertex, out ToFragment) = ShaderVertex;
        PixelShader (in ToFragment, out ToScreen) = ShaderColor;
    }
}
